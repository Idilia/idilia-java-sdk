package com.idilia.services.kb;

import java.util.List;
import java.util.Objects;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import com.idilia.services.base.IdiliaClientException;
import com.idilia.services.base.RequestBase;

/**
 * Base class for the common parameters of menu requests from the KB server
 */
public abstract class MenuRequest extends RequestBase {
  
  
  /**
   * Specify the information to add as HTML5 data attributes for each sense in the menu. 
   * Possible values are:
   * <ul>
   * <li>extRefs: to report on external references for the sense
   * <li>schemaOrgT: to report the schema.org type for the sense
   * </ul>
   * @param fskInfos string with all the values requested. Multiple values are space separated. Default is none.
   * @return updated MenuRequest
   */
  public MenuRequest setFskInfos(String fskInfos) {
    this.fskInfos = fskInfos;
    return this;
  }


  /**
   * Specify filters to limit the senses included in the menu. Possible values are:
   * <ul>
   * <li>noExtRefs: Exclude senses that do not have a known external reference.
   * <li>noDynamic: Exclude senses dynamically generated by name entity recognition.
   * <li>noOther: Do not include an "other sense" menu card.
   * <li>noSpanning: Do not include a sense that would span the whole document provided.
   * </ul>
   * @param filters string with all the values requested. Multiple values are space separated. Default is none.
   * @return updated MenuRequest
   */
  public MenuRequest setFilters(String filters) {
    this.filters = filters;
    return this;
  }


  /**
   * Specify sense collapsing mode. When senses are collapsed, only one card is included in the menu for
   * all those collapsed together.
   * Possible values are:
   * <ul>
   * <li>none: No collapsing occurs.
   * <li>equivs: Equivalent senses (e.g., connected by a near synonym edge) are collapsed.
   * </ul>
   * @param collapsing string with the collapsing mode requested. Default is none.
   * @return updated MenuRequest
   */
  public MenuRequest setCollapsing(String collapsing) {
    this.collapsing = collapsing;
    return this;
  }

  /**
   * Specify that the first card of the sense menu should be the special card with choice "any sense". This
   * is useful for applications where the user can indicate that no specific sense should be used for the word.
   * @return updated MenuRequest
   */
  public MenuRequest setAddAnySense()
  {
    this.addAnySense = "true";
    return this;
  }

  /**
   * Specify that the last card of the sense menu should be the special card allowing the definition of a new
   * sense. This is only possible when RequestBase#setCustomer is used to associate the request to a specific
   * customer.
   * @return updated MenuRequest
   */
  public MenuRequest setAddCreateSense()
  {
    this.addCreateSense = "true";
    return this;
  }

  
  /**
   * Set the template value for generating the tiles of the menu. This must be aligned with the jquery 
   * tagging menu or jquery sense menu plugin version used (e.g., image_v3)
   * @param t name of template.
   * @return updated MenuRequest
   */
  public MenuRequest setTemplate(String t) {
    this.tmplt = t;
    return this;
  }
  
  /**
   * Return the template value requested. Normally something like "image_v3".
   * @return name of the template
   */
  public String getTemplate() {
    return this.tmplt;
  }

  @Override
  protected void getHttpQueryParms(List<NameValuePair> parms) throws IdiliaClientException {
    if (tmplt == null)
      throw new IdiliaClientException("Parameter template must be set");
    
    if (fskInfos != null)
      parms.add(new BasicNameValuePair("fskInfos", fskInfos));
    if (filters != null)
      parms.add(new BasicNameValuePair("filters", filters));
    if (collapsing != null)
      parms.add(new BasicNameValuePair("collapsing", collapsing));
    parms.add(new BasicNameValuePair("template", tmplt));
    if (addAnySense != null)
      parms.add(new BasicNameValuePair("addAnySense", addAnySense));
    if (addCreateSense != null)
      parms.add(new BasicNameValuePair("addCreateSense", addCreateSense));
    super.getHttpQueryParms(parms);
  }
  
  @Override
  public boolean equals(Object o) {
    if (!(o instanceof MenuRequest)) return false;
    MenuRequest other = (MenuRequest) o;
    return 
        Objects.equals(fskInfos, other.fskInfos) &&
        Objects.equals(filters, other.filters) &&
        Objects.equals(collapsing, other.collapsing) &&
        Objects.equals(tmplt, other.tmplt) &&
        Objects.equals(addAnySense, other.addAnySense) &&
        Objects.equals(addCreateSense, other.addCreateSense) &&
        true;
  }
  
  
  // Policy elements
  private String fskInfos;
  private String filters;
  private String collapsing;
  private String tmplt;
  private String addAnySense;
  private String addCreateSense;
}
